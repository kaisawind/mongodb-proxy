// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a sample mongodb proxy server.",
    "title": "Swagger of MongoDB for Grafana plugin",
    "contact": {
      "email": "wind.kaisa@gmail.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://mit-license.org/"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/": {
      "get": {
        "security": [],
        "description": "should return 200 ok. Used for \"Test connection\" on the datasource config page.",
        "tags": [
          "SimpleJSON"
        ],
        "summary": "test connection",
        "operationId": "TestDatasource",
        "responses": {
          "200": {
            "description": "connection successfully."
          }
        }
      }
    },
    "/annotations": {
      "post": {
        "security": [],
        "description": "used by dashboards to get annotations.",
        "tags": [
          "SimpleJSON"
        ],
        "summary": "get annotations",
        "operationId": "AnnotationQuery",
        "parameters": [
          {
            "description": "The options to query.",
            "name": "options",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Target"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get annotations successfully.",
            "schema": {
              "$ref": "#/definitions/Annotations"
            }
          }
        }
      }
    },
    "/query": {
      "post": {
        "security": [],
        "description": "used by panels to get data",
        "tags": [
          "SimpleJSON"
        ],
        "summary": "query data",
        "operationId": "Query",
        "parameters": [
          {
            "description": "The options to query.",
            "name": "options",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Query"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "query data successfully.",
            "schema": {
              "$ref": "#/definitions/Timeseries"
            }
          }
        }
      }
    },
    "/search": {
      "post": {
        "security": [],
        "description": "used by the find metric options on the query tab in panels.",
        "tags": [
          "SimpleJSON"
        ],
        "summary": "find metric options",
        "operationId": "MetricFindQuery",
        "parameters": [
          {
            "description": "The options to query.",
            "name": "options",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Target"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "find metric options successfully.",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Annotation": {
      "description": "Annotation is the object passed by Grafana when it fetches annotations.",
      "type": "object",
      "properties": {
        "datasource": {
          "type": "string"
        },
        "enable": {
          "type": "boolean"
        },
        "iconColor": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "showLine": {
          "type": "boolean"
        }
      }
    },
    "Annotations": {
      "description": "encodes the information provided by Grafana in its requests.",
      "type": "object",
      "properties": {
        "annotation": {
          "$ref": "#/definitions/Annotation"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      }
    },
    "Query": {
      "description": "query data requests.",
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "default": "json",
          "enum": [
            "json"
          ]
        },
        "interval": {
          "type": "string"
        },
        "intervalMs": {
          "type": "integer"
        },
        "maxDataPoints": {
          "type": "integer"
        },
        "range": {
          "$ref": "#/definitions/Range"
        },
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Target"
          }
        }
      }
    },
    "Range": {
      "description": "Range specifies the time range the request is valid for.",
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "format": "date-time"
        },
        "to": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Target": {
      "description": "data target.",
      "type": "object",
      "properties": {
        "refId": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "timeserie",
          "enum": [
            "timeserie",
            "table"
          ]
        }
      }
    },
    "Timeserie": {
      "type": "object",
      "properties": {
        "datapoints": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "target": {
          "type": "string"
        }
      }
    },
    "Timeseries": {
      "description": "Request object passed to datasource.query function",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Timeserie"
      }
    }
  },
  "tags": [
    {
      "description": "Operations about SimpleJSON",
      "name": "SimpleJSON"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a sample mongodb proxy server.",
    "title": "Swagger of MongoDB for Grafana plugin",
    "contact": {
      "email": "wind.kaisa@gmail.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://mit-license.org/"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/": {
      "get": {
        "security": [],
        "description": "should return 200 ok. Used for \"Test connection\" on the datasource config page.",
        "tags": [
          "SimpleJSON"
        ],
        "summary": "test connection",
        "operationId": "TestDatasource",
        "responses": {
          "200": {
            "description": "connection successfully."
          }
        }
      }
    },
    "/annotations": {
      "post": {
        "security": [],
        "description": "used by dashboards to get annotations.",
        "tags": [
          "SimpleJSON"
        ],
        "summary": "get annotations",
        "operationId": "AnnotationQuery",
        "parameters": [
          {
            "description": "The options to query.",
            "name": "options",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Target"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get annotations successfully.",
            "schema": {
              "$ref": "#/definitions/Annotations"
            }
          }
        }
      }
    },
    "/query": {
      "post": {
        "security": [],
        "description": "used by panels to get data",
        "tags": [
          "SimpleJSON"
        ],
        "summary": "query data",
        "operationId": "Query",
        "parameters": [
          {
            "description": "The options to query.",
            "name": "options",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Query"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "query data successfully.",
            "schema": {
              "$ref": "#/definitions/Timeseries"
            }
          }
        }
      }
    },
    "/search": {
      "post": {
        "security": [],
        "description": "used by the find metric options on the query tab in panels.",
        "tags": [
          "SimpleJSON"
        ],
        "summary": "find metric options",
        "operationId": "MetricFindQuery",
        "parameters": [
          {
            "description": "The options to query.",
            "name": "options",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Target"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "find metric options successfully.",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Annotation": {
      "description": "Annotation is the object passed by Grafana when it fetches annotations.",
      "type": "object",
      "properties": {
        "datasource": {
          "type": "string"
        },
        "enable": {
          "type": "boolean"
        },
        "iconColor": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "showLine": {
          "type": "boolean"
        }
      }
    },
    "Annotations": {
      "description": "encodes the information provided by Grafana in its requests.",
      "type": "object",
      "properties": {
        "annotation": {
          "$ref": "#/definitions/Annotation"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      }
    },
    "Query": {
      "description": "query data requests.",
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "default": "json",
          "enum": [
            "json"
          ]
        },
        "interval": {
          "type": "string"
        },
        "intervalMs": {
          "type": "integer"
        },
        "maxDataPoints": {
          "type": "integer"
        },
        "range": {
          "$ref": "#/definitions/Range"
        },
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Target"
          }
        }
      }
    },
    "Range": {
      "description": "Range specifies the time range the request is valid for.",
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "format": "date-time"
        },
        "to": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Target": {
      "description": "data target.",
      "type": "object",
      "properties": {
        "refId": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "timeserie",
          "enum": [
            "timeserie",
            "table"
          ]
        }
      }
    },
    "Timeserie": {
      "type": "object",
      "properties": {
        "datapoints": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "target": {
          "type": "string"
        }
      }
    },
    "Timeseries": {
      "description": "Request object passed to datasource.query function",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Timeserie"
      }
    }
  },
  "tags": [
    {
      "description": "Operations about SimpleJSON",
      "name": "SimpleJSON"
    }
  ]
}`))
}
