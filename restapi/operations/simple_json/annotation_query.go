// Code generated by go-swagger; DO NOT EDIT.

package simple_json

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AnnotationQueryHandlerFunc turns a function with the right signature into a annotation query handler
type AnnotationQueryHandlerFunc func(AnnotationQueryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AnnotationQueryHandlerFunc) Handle(params AnnotationQueryParams) middleware.Responder {
	return fn(params)
}

// AnnotationQueryHandler interface for that can handle valid annotation query params
type AnnotationQueryHandler interface {
	Handle(AnnotationQueryParams) middleware.Responder
}

// NewAnnotationQuery creates a new http.Handler for the annotation query operation
func NewAnnotationQuery(ctx *middleware.Context, handler AnnotationQueryHandler) *AnnotationQuery {
	return &AnnotationQuery{Context: ctx, Handler: handler}
}

/*AnnotationQuery swagger:route POST /annotations SimpleJSON annotationQuery

get annotations

used by dashboards to get annotations.

*/
type AnnotationQuery struct {
	Context *middleware.Context
	Handler AnnotationQueryHandler
}

func (o *AnnotationQuery) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAnnotationQueryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
