// Code generated by go-swagger; DO NOT EDIT.

package simple_json

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new simple json API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for simple json API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AnnotationQuery(params *AnnotationQueryParams, opts ...ClientOption) (*AnnotationQueryOK, error)

	MetricFindQuery(params *MetricFindQueryParams, opts ...ClientOption) (*MetricFindQueryOK, error)

	Query(params *QueryParams, opts ...ClientOption) (*QueryOK, error)

	TestDatasource(params *TestDatasourceParams, opts ...ClientOption) (*TestDatasourceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AnnotationQuery gets annotations

  used by dashboards to get annotations.
*/
func (a *Client) AnnotationQuery(params *AnnotationQueryParams, opts ...ClientOption) (*AnnotationQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnnotationQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AnnotationQuery",
		Method:             "POST",
		PathPattern:        "/annotations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AnnotationQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnnotationQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AnnotationQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetricFindQuery finds metric options

  used by the find metric options on the query tab in panels.
*/
func (a *Client) MetricFindQuery(params *MetricFindQueryParams, opts ...ClientOption) (*MetricFindQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetricFindQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetricFindQuery",
		Method:             "POST",
		PathPattern:        "/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MetricFindQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetricFindQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetricFindQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Query queries data

  used by panels to get data
*/
func (a *Client) Query(params *QueryParams, opts ...ClientOption) (*QueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Query",
		Method:             "POST",
		PathPattern:        "/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Query: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TestDatasource tests connection

  should return 200 ok. Used for "Test connection" on the datasource config page.
*/
func (a *Client) TestDatasource(params *TestDatasourceParams, opts ...ClientOption) (*TestDatasourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestDatasourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TestDatasource",
		Method:             "GET",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestDatasourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TestDatasourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TestDatasource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
