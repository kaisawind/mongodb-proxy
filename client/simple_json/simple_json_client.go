// Code generated by go-swagger; DO NOT EDIT.

package simple_json

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new simple json API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for simple json API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AnnotationQuery gets annotations

used by dashboards to get annotations.
*/
func (a *Client) AnnotationQuery(params *AnnotationQueryParams) (*AnnotationQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnnotationQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AnnotationQuery",
		Method:             "POST",
		PathPattern:        "/annotations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AnnotationQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AnnotationQueryOK), nil

}

/*
MetricFindQuery finds metric options

used by the find metric options on the query tab in panels.
*/
func (a *Client) MetricFindQuery(params *MetricFindQueryParams) (*MetricFindQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetricFindQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetricFindQuery",
		Method:             "POST",
		PathPattern:        "/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MetricFindQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MetricFindQueryOK), nil

}

/*
Query queries data

used by panels to get data
*/
func (a *Client) Query(params *QueryParams) (*QueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Query",
		Method:             "POST",
		PathPattern:        "/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QueryOK), nil

}

/*
TestDatasource tests connection

should return 200 ok. Used for "Test connection" on the datasource config page.
*/
func (a *Client) TestDatasource(params *TestDatasourceParams) (*TestDatasourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestDatasourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TestDatasource",
		Method:             "GET",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestDatasourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestDatasourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
